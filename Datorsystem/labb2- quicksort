#include <iregdef.h>
.data
vek:	.word  4,5,2,2,1,6,7,9,5,10	
n:      .word  10
str1:	.asciiz "%d\n"
    
	.text
	.globl start
		

start:
			
	lw t0, n            # t0 har n=antal element	
	la s0, vek			# a0 har vek	
	li a0, 0			# a1 = 0   (low)
	addi a1, t0, -1		# a2 = 9  (high)
    	jal skriv
    
skriv:   
	 li t0, 0
 	print:
	 bge t0,10,L2
    	nop
    	sll t1,t0,2
    	add t1,s0, t1
    	lw t1, 0(t1)
    	nop 

	la a0, str1
	move a1, t1   
  	jal printf    
  	nop
  	addi t0,t0,1
  	b print
  	nop     
  	
 L2:
 
	lw t0, n            		# t0 har n=antal element	
	la s0, vek			# a0 har vek	
	li a0, 0			# a1 = 0   (low)
	addi a1, t0, -1			# a2 = 9  (high)	
    	jal quicksort
    	jal skriv
    
quicksort:   

	slt t8, a0, a1 			# $t8 = left < righ
	beq t8, zero, return		# if (left >= right) return
	j keep
	return:
		jr ra			# return
	keep:
	
	addi sp, sp, -12		# stack of right, return address, and j
	sw ra, 8(sp)			# push return address
	sw a1, 4(sp) 			# push right
	
	sll t3, a0, 2			# $t3 = left * 4
	add t3, t3 ,s0			# $t3 = &array[left]
	lw t3, 0(t3)			# $t3 = array[left] = pivot
	
	addi t0, a0, 1			# $t0 = i = left + 1
	addi t1, a1, 0	 		# $t1 = j = right
	loop:
	  loopI:
		sll t4, t0, 2		# $t4 = i * 4
		add t4, s0, t4		# $t4 = &array[i]
		lw t5, 0(t4)		# $t5 = array[i]
		slt t8, t3, t5		# $t8 = pivot < array[i]
		bne t8, zero, BreakI	# if (array[i] > pivot) break
		addi t0, t0, 1		# i = i + 1
		slt t8, a1, t0		# $t8 = right < i
		bne t8, zero, BreakI	# i > right
	   BreakI:
		
	     loopJ:	
		sll t6, t1, 2		# $t6 = j * 4
		add t6, s0, t6		# $t6 = &array[j]
		lw t7, 0(t6)		# $t7 = array[j]
		slt t8, t7, t3		# $t8 = array[j] < pivot
		bne t8, zero, BreakJ	# if (array[j] < pivot) break
		addi t1, t1, -1		# j = j - 1
		slt t8, a0, t1		# $t8 = left < j
		beq t8, zero, BreakJ	# left >= j
		
	     BreakJ:	
		
		slt t8, t1, t0		# $t8 = i > j
		bne t8, zero, EndLoop	# if (i > j) break;
		
		sll t4, t0, 2		# $t4 = i * 4
		add t4, s0, t4		# $t4 = &array[i]
		lw t5, 0(t4)		# $t5 = array[i]
		sll t6, t1, 2		# $t6 = j * 4
		add t6, s0, t6       	# $t6 = &array[j]
    	        lw t7, 0(t6)            # $t7 = array[j]
    		sw t7, 0(t4)
    		sw t5, 0(t6)    	# swap(array[i], array[j])     

    	      j loop        		# while (i <= j)
         EndLoop:
    
                sll t4, a0, 2           # $t4 = left * 4
  	        add t4, s0, t4          # $t4 = &array[left]
  	        sll t6, t1, 2           # $t6 = j * 4
  		add t6, s0, t6          # $t6 = &array[j]
  		lw t7, 0(t6)            # $t7 = array[j]
  		sw t7, 0(t4)
  		sw t3, 0(t6)            # swap(array[left], array[j])
  
 		sw t1, 0(sp)            # push j
 		addi a1, t1, 0          # $a1 = j
  		jal quicksort                 # Qsort(left, j)
  		lw t1, 0(sp)            # pop j, $t1 = j
  		addi a0, t1, 1          # $a0 = j + 1
  		lw a1, 4(sp)            # pop right, $a1 = right
  		jal quicksort                 # Qsort(j + 1, right)

  		lw ra, 8(sp)           # pop return address
  		addi sp, sp, 12
  		jr ra                    # return	                
		
		
		
		
		
